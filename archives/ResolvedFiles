#Imports

#Import entire numpy library
import Rappture
import sys
#Define Input

#rho: Desity of the Medium
#p = 1

#Phi_0: Amplitude of the Incident Wave
#P = 1

#Betta_1: Complex Shear Wave Number
#B1 = 1

#alpha_1 = Complex Longitudinal Wave Number
#a1 = 1

#a: radius of the chrystal
#a = 1

#omega: angular frequency
#w = 1

#connecting to GUI
io = Rappture.PyXml(sys.argv[1])
p = float(io['input.group(MechProperties).number(Density).current'].value)
P = float(io['input.group(MechProperties).number(Amplitude).current'].value)
B1 = float(io['input.group(MechProperties).number(ComplexShear).current'].value)
a1 = float(io['input.group(MechProperties).number(ComplexLong).current'].value)
a = float(io['input.group(MechProperties).number(Radius).current'].value)
w = float(io['input.group(MechProperties).number(Omega).current'].value)

# test output
print p
print P
phi= float(io['output.number(phi)'].value)
phi['current']=P*2
print phi
io.close()
#Parameter Equations

#N_p
def Np(n):
    return (4 * n**2) + (n+1) * (B1/a1)**2 

#A_n
def An(n):
    p1 = 1
    p2 = 1
    
    if n == 0:
        return -1/3 * 1j * P * (a1*a)**3
        
    if n == 1:
        return -1/3 * 1j * P * (1 - (p2/p1)) * (a1*a)**3
        
    if n > 1:
        return (1j)**(n-1) * P * ( (2**n * factorial(n))/factorial(2*n) )**2 * Np(n)*(a1*a)**(2*n-1)

#B_n
def Bn(n):
    if n == 0:
        return 1
    
    if n > 0:
        return -(B1/a1)**(n+1) * (An(n)/n)

#mu_1
u1 = p * w**2 / B1

#P_n: Legendre Pollynomials
def Pn(n):
    return legendre(n)
#n: int
#Degree of the polynomial.

#h_n: Spherical Hankel Function of the first kind
def hn(n,z):
    return hankel1(n,z)
#n: array_like
#Order (float)

#z: array_like
#Argument (float or complex)
#Basically whatever is in the parentheses


#j_n: Spherical Bessel Function of the first kind
def jn(n,z):
    return spherical_jn(n,z)
#n: int, array_like
#Order of the Bessel function (n >= 0)

#z: complex or float, array_like
#Argument of the Bessel function
#Basically whatever is in the parentheses
